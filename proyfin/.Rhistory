library(R2OpenBUGS)
library(R2jags)
wdir<-"/home/abraham/RA2018/proyfin"
setwd(wdir)
camp<-read.csv('multivsamp.csv',header=TRUE,sep=";")
campx<-camp[sample(nrow(camp), 1000), ]#camp[c(1:1000),]
n<-nrow(campx)
x<-campx$TO_NECESIDAD_FINAN_CAP_1M
y<-campx$NU_VINC_COGNODATA
z<-campx$contrata
data<-list("n"=n,"x"=x,"y"=y,"z"=z)
inits<-function(){list(alpha=0, b.x=1, b.y=1,zf=rep(0,n))}
parameters<-c("alpha","b.x","b.y","p","zf")
ex1.sim<-bugs(data,inits,parameters,model.file="logreg.txt",
n.iter=100000,n.chains=1,n.burnin=10000)
parameters<-c("alpha","b.x","b.y","zf")
ex1.sim<-bugs(data,inits,parameters,model.file="logreg.txt",
n.iter=100000,n.chains=1,n.burnin=10000)
rex<-function(fun){return(fun)}
out<-rex(ex1.sim)$sims.list
out.sum<-rex(ex1.sim)$summary
adj<-function(out.sum,y,a){
out.yf<-out.sum[grep(a,rownames(out.sum)),]
or<-order(x)
ymin<-min(y,out.yf[,c(1,3,7)])
ymax<-max(y,out.yf[,c(1,3,7)])
par(mfrow=c(1,1))
plot(x,y,ylim=c(ymin,ymax))
lines(x[or],out.yf[or,1],lwd=2,col=2)
lines(x[or],out.yf[or,3],lty=2,col=2)
lines(x[or],out.yf[or,7],lty=2,col=2)
plot(out.yf[1:n,1],y,type ="p")
}
adj(out.sum,z,"zf")
met<-function(ex1.sim,out.sum){
out.dic<-ex1.sim$DIC
#out.dic<-ej4.sim$BUGSoutput$DIC
print(out.dic)
print(out.sum)
}
met(ex1.sim,out.sum)
out.yf<-out.sum[grep(a,rownames(out.sum)),]
r2<-function(y,out.sum,a){
out.yf<-out.sum[grep(a,rownames(out.sum)),]
R2<-(cor(y,out.yf[1:n,1]))^2
print(R2)
}
r2(y,out.sum,"yf")
r2(y,out.sum,"zf")
x
adj<-function(out.sum,x,y,a){
out.yf<-out.sum[grep(a,rownames(out.sum)),]
or<-order(x)
ymin<-min(y,out.yf[,c(1,3,7)])
ymax<-max(y,out.yf[,c(1,3,7)])
par(mfrow=c(1,1))
plot(x,y,ylim=c(ymin,ymax))
lines(x[or],out.yf[or,1],lwd=2,col=2)
lines(x[or],out.yf[or,3],lty=2,col=2)
lines(x[or],out.yf[or,7],lty=2,col=2)
plot(out.yf[1:n,1],y,type ="p")
}
adj(out.sum,y,z,"zf")
mean(z)
hist(y)
hist(log(y))
hist(log(y+1))
hist(log(x+1))
hist(log(x))
plot(y,z)
plot(cor(y,z))
cor(y,z)
cor(x,z)
corrplot(campx)
corplot(campx)
corrplot(campx)
?corrplot
??corrplot
library(corrplot)
corrplot(campx)
corrplot(z,x)
?corplot
?corrplot
corrplot(cor(campx))
cor(x,y,z)
corrplot(cor(y,z))
new<-matrix(X,Y,Z)
new<-matrix(x,y,z)
new
matrix(x,y,z)
x
y
z
install.packages("shiny")
library(shiny)
runExample("01_hello")
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
# 1. It is "reactive" and therefore should be automatically
# re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
runApp("Hello", display.mode = "showcase")
wdir<-"/home/abraham/Seminario2018/SMAE_LB_2018/Material/Shiny"
setwd(wdir)
runApp("Hello", display.mode = "showcase")
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
textOutput("selected_var")
)
)
)
server <- function(input, output) {
output$selected_var <- renderText({
"You have selected this"
})
}
runApp("Output-Example", display.mode = "showcase")
runApp("Output-Example", display.mode = "showcase")
server <- function(input, output) {
output$selected_var <- renderText({
print("You have selected this", input$var)
})
}
runApp("Output-Example", display.mode = "showcase")
faithful
wdir<-"/home/abraham/RA2018/proyfin"
setwd(wdir)
